"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkgranular_vr"] = self["webpackChunkgranular_vr"] || []).push([["src_2d-billiards_js"],{

/***/ "./src/2d-billiards.js":
/*!*****************************!*\
  !*** ./src/2d-billiards.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"init\": () => (/* binding */ init)\n/* harmony export */ });\n/* harmony import */ var _css_main_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../css/main.css */ \"./css/main.css\");\n/* harmony import */ var _text_to_speech_2d_billiards_circle_mp3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../text-to-speech/2d-billiards-circle.mp3 */ \"./text-to-speech/2d-billiards-circle.mp3\");\n/* harmony import */ var _text_to_speech_2d_billiards_square_mp3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../text-to-speech/2d-billiards-square.mp3 */ \"./text-to-speech/2d-billiards-square.mp3\");\n/* harmony import */ var _text_to_speech_2d_billiards_ellipse_mp3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../text-to-speech/2d-billiards-ellipse.mp3 */ \"./text-to-speech/2d-billiards-ellipse.mp3\");\n/* harmony import */ var _libs_SphereHandler_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../libs/SphereHandler.js */ \"./libs/SphereHandler.js\");\n/* harmony import */ var _libs_WallHandler_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../libs/WallHandler.js */ \"./libs/WallHandler.js\");\n/* harmony import */ var _libs_RaycastHandler_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../libs/RaycastHandler.js */ \"./libs/RaycastHandler.js\");\n/* harmony import */ var _libs_lights__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../libs/lights */ \"./libs/lights.js\");\n/* harmony import */ var _libs_buttons__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../libs/buttons */ \"./libs/buttons.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./index */ \"./src/index.js\");\n/* provided dependency */ var THREE = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\n\n\n\n\n\n\n// import * as LAYOUT from '../libs/Layout.js'\n// import { NDSTLLoader, renderSTL } from '../libs/NDSTLLoader.js';\n\n\n\n// import * as AUDIO from \"../libs/audio\";\n\n\n\n\n\nlet S;\n\nvar params = {\n    dimension: 2,\n    L: _index__WEBPACK_IMPORTED_MODULE_9__.human_height, //system size\n    N: 1,\n    // packing_fraction: 0.5,\n    constant_volume: true,\n    axial_strain: 0,\n    volumetric_strain: 0,\n    paused: false,\n    g_mag: 1e3,\n    theta: 0, // slope angle in DEGREES\n    r_max: 0.1,\n    r_min: 0.1,\n    particle_density: 1,\n    shear_rate: 10,\n    lut: 'None',\n    cg_field: 'Density',\n    quality: 5,\n    cg_width: 50,\n    cg_height: 50,\n    cg_opacity: 0.8,\n    cg_window_size: 3,\n    particle_opacity: 1,\n    F_mag_max: 0.005,\n    aspect_ratio: 1,\n    ellipse_ratio: 0.5,\n}\n\n// let rainbow = new Lut(\"rainbow\", 512); // options are rainbow, cooltowarm and blackbody\n// let cooltowarm = new Lut(\"cooltowarm\", 512); // options are rainbow, cooltowarm and blackbody\n// let blackbody = new Lut(\"blackbody\", 512); // options are rainbow, cooltowarm and blackbody\n\nparams.average_radius = (params.r_min + params.r_max) / 2.;\nparams.thickness = 1e-5;\n\n\nparams.particle_volume = Math.PI * Math.pow(params.average_radius, 2);\n\nparams.particle_mass = params.particle_volume * params.particle_density;\n\nfunction init() {\n    _libs_SphereHandler_js__WEBPACK_IMPORTED_MODULE_4__.createNDParticleShader(params).then(main);\n}\n\nasync function main() {\n    await NDDEMCGPhysics().then(() => {\n        build_world();\n        _index__WEBPACK_IMPORTED_MODULE_9__.renderer.setAnimationLoop(update);\n    });\n}\n\nasync function build_world() {\n\n    _libs_lights__WEBPACK_IMPORTED_MODULE_7__.add_default_lights(_index__WEBPACK_IMPORTED_MODULE_9__.scene);\n\n    _libs_SphereHandler_js__WEBPACK_IMPORTED_MODULE_4__.add_spheres(S, params, _index__WEBPACK_IMPORTED_MODULE_9__.scene);\n\n    const base_geometry = new THREE.PlaneGeometry(2 * params.L, 2 * params.L);\n    const base_material = new THREE.MeshBasicMaterial({ color: 0x333333, side: THREE.DoubleSide });\n    const plane = new THREE.Mesh(base_geometry, base_material);\n    plane.rotateX(Math.PI / 2.);\n    // plane.position.y = -0.5 * params.r_min;\n    _index__WEBPACK_IMPORTED_MODULE_9__.scene.add(plane);\n\n    _libs_buttons__WEBPACK_IMPORTED_MODULE_8__.add_scene_change_button(_index__WEBPACK_IMPORTED_MODULE_9__.apps.list[_index__WEBPACK_IMPORTED_MODULE_9__.apps.current - 1].url, 'Back: ' + _index__WEBPACK_IMPORTED_MODULE_9__.apps.list[_index__WEBPACK_IMPORTED_MODULE_9__.apps.current - 1].name, _index__WEBPACK_IMPORTED_MODULE_9__.controls, _index__WEBPACK_IMPORTED_MODULE_9__.scene, [-1, 1, 1], 0.25, [0, Math.PI / 4, 0]);\n    setTimeout(() => { _libs_buttons__WEBPACK_IMPORTED_MODULE_8__.add_scene_change_button(_index__WEBPACK_IMPORTED_MODULE_9__.apps.list[_index__WEBPACK_IMPORTED_MODULE_9__.apps.current + 1].url, 'Next: ' + _index__WEBPACK_IMPORTED_MODULE_9__.apps.list[_index__WEBPACK_IMPORTED_MODULE_9__.apps.current + 1].name, _index__WEBPACK_IMPORTED_MODULE_9__.controls, _index__WEBPACK_IMPORTED_MODULE_9__.scene, [1, 1, 1], 0.25, [0, -Math.PI / 4, 0]) }, _index__WEBPACK_IMPORTED_MODULE_9__.apps.list[_index__WEBPACK_IMPORTED_MODULE_9__.apps.current].button_delay);\n\n    _libs_RaycastHandler_js__WEBPACK_IMPORTED_MODULE_6__.add_ghosts(_index__WEBPACK_IMPORTED_MODULE_9__.scene, 1000, params.average_radius/4., 0xeeeeee);\n}\n\n\nasync function update() {\n    if ( _index__WEBPACK_IMPORTED_MODULE_9__.visibility === 'visible' ) {\n        // requestAnimationFrame( animate );\n        _libs_SphereHandler_js__WEBPACK_IMPORTED_MODULE_4__.move_spheres(S, params);\n        _libs_RaycastHandler_js__WEBPACK_IMPORTED_MODULE_6__.update_ghosts(params);\n        // RAYCAST.animate_locked_particle(S, camera, SPHERES.spheres, params);\n        // if (!params.paused) {\n        S.simu_step_forward(50);\n        // update_cg_field();\n        // }\n        // SPHERES.draw_force_network(S, params, scene);\n        if (_index__WEBPACK_IMPORTED_MODULE_9__.controls !== undefined) { _index__WEBPACK_IMPORTED_MODULE_9__.controls.update(); }\n        _index__WEBPACK_IMPORTED_MODULE_9__.renderer.render(_index__WEBPACK_IMPORTED_MODULE_9__.scene, _index__WEBPACK_IMPORTED_MODULE_9__.camera);\n    }\n}\n\nasync function NDDEMCGPhysics() {\n    await _index__WEBPACK_IMPORTED_MODULE_9__.NDDEMCGLib.init(params.dimension, params.N);\n    S = _index__WEBPACK_IMPORTED_MODULE_9__.NDDEMCGLib.S;\n    setup_NDDEM();\n}\n\nfunction setup_NDDEM() {\n    S.simu_interpret_command(\"dimensions \" + String(params.dimension) + \" \" + String(params.N));\n    S.simu_interpret_command(\"radius -1 0.5\");\n    let m;\n    if (params.dimension === 2) {\n        m = Math.PI * 0.5 * 0.5 * params.particle_density;\n    } else {\n        m = 4. / 3. * Math.PI * 0.5 * 0.5 * 0.5 * params.particle_density;\n    }\n\n    S.simu_interpret_command(\"mass -1 \" + String(m));\n    S.simu_interpret_command(\"auto rho\");\n    S.simu_interpret_command(\"auto radius uniform \" + params.r_min + \" \" + params.r_max);\n    S.simu_interpret_command(\"auto mass\");\n    S.simu_interpret_command(\"auto inertia\");\n    S.simu_interpret_command(\"auto skin\");\n\n    S.simu_interpret_command(\"boundary 0 WALL 0 \" + String(2 * params.L));\n    S.simu_interpret_command(\"boundary 1 WALL -\" + String(params.L) + \" \" + String(params.L));\n    if (params.dimension > 2) {\n        S.simu_interpret_command(\"boundary 2 WALL -\" + String(params.r_max) + \" \" + String(params.r_max));\n    }\n    if (params.dimension > 3) {\n        S.simu_interpret_command(\"boundary 3 WALL -\" + String(params.L) + \" \" + String(params.L));\n    }\n    S.simu_interpret_command(\"gravity 0 \" + \"0 \".repeat(params.dimension - 2))\n\n    // S.simu_interpret_command(\"auto location randomdrop\");\n    S.simu_interpret_command(\"location 0 \" + String(params.L-0.3) + \" 0.5\");\n    S.simu_interpret_command(\"velocity 0 50 40\");\n\n    if ( _index__WEBPACK_IMPORTED_MODULE_9__.extra_params.has('boundary') ) {\n        if ( _index__WEBPACK_IMPORTED_MODULE_9__.extra_params.get('boundary') === 'square' ) {\n            _libs_WallHandler_js__WEBPACK_IMPORTED_MODULE_5__.add_2d_box(params);\n            // console.log('SQUARE')\n        } else if ( _index__WEBPACK_IMPORTED_MODULE_9__.extra_params.get('boundary') === 'circle' ) {\n            // console.log('CIRCLE')\n            S.simu_interpret_command(\"boundary \"+String(params.dimension)+\" SPHERE \"+String(params.L)+ \" \" + String(params.L) + \" 0\"); // add a sphere!\n            _libs_WallHandler_js__WEBPACK_IMPORTED_MODULE_5__.add_2d_circle(params);\n        } else if ( _index__WEBPACK_IMPORTED_MODULE_9__.extra_params.get('boundary') === 'ellipse' ) {\n            S.simu_interpret_command(\"boundary \"+String(params.dimension)+\" ELLIPSE \"+String(params.L)+ \" \" + String(params.L*params.ellipse_ratio) + \" \" + String(params.L) + \" 0\"); // radius x, radius y, centre x, centre y\n            S.simu_interpret_command(\"set gradientdescent_gamma 2e-3\");\n            // S.simu_interpret_command(\"set gradientdescent_tol 1e-4\");\n            _libs_WallHandler_js__WEBPACK_IMPORTED_MODULE_5__.add_2d_ellipse(params);\n            // console.log('ELLIPSE')\n        }\n\n    }\n    _index__WEBPACK_IMPORTED_MODULE_9__.scene.add(_libs_WallHandler_js__WEBPACK_IMPORTED_MODULE_5__.walls);\n\n    let tc = 1e-3;\n    let rest = 1.0;\n    let vals = _libs_SphereHandler_js__WEBPACK_IMPORTED_MODULE_4__.setCollisionTimeAndRestitutionCoefficient(tc, rest, params.particle_mass)\n\n    S.simu_interpret_command(\"set Kn \" + String(vals.stiffness));\n    S.simu_interpret_command(\"set Kt \" + String(0.8 * vals.stiffness));\n    S.simu_interpret_command(\"set GammaN \" + String(vals.dissipation));\n    S.simu_interpret_command(\"set GammaT \" + String(vals.dissipation));\n    S.simu_interpret_command(\"set Mu 0\");\n    S.simu_interpret_command(\"set Mu_wall 0\");\n    S.simu_interpret_command(\"set damping 0\");\n    S.simu_interpret_command(\"set T 150\");\n    S.simu_interpret_command(\"set dt \" + String(tc / 20));\n    S.simu_interpret_command(\"set tdump 1000000\"); // how often to calculate wall forces\n    S.simu_interpret_command(\"auto skin\");\n    S.simu_finalise_init();\n\n}\n\n\n//# sourceURL=webpack://granular-vr/./src/2d-billiards.js?");

/***/ }),

/***/ "./text-to-speech/2d-billiards-circle.mp3":
/*!************************************************!*\
  !*** ./text-to-speech/2d-billiards-circle.mp3 ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"7d8d53d90996f0026ec6.mp3\";\n\n//# sourceURL=webpack://granular-vr/./text-to-speech/2d-billiards-circle.mp3?");

/***/ }),

/***/ "./text-to-speech/2d-billiards-ellipse.mp3":
/*!*************************************************!*\
  !*** ./text-to-speech/2d-billiards-ellipse.mp3 ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"54f8be41c4aec65a27de.mp3\";\n\n//# sourceURL=webpack://granular-vr/./text-to-speech/2d-billiards-ellipse.mp3?");

/***/ }),

/***/ "./text-to-speech/2d-billiards-square.mp3":
/*!************************************************!*\
  !*** ./text-to-speech/2d-billiards-square.mp3 ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"ed6ed5e2f11663f83bb1.mp3\";\n\n//# sourceURL=webpack://granular-vr/./text-to-speech/2d-billiards-square.mp3?");

/***/ })

}]);