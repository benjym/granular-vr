"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkgranular_vr"] = self["webpackChunkgranular_vr"] || []).push([["src_pyramid_js"],{

/***/ "./src/pyramid.js":
/*!************************!*\
  !*** ./src/pyramid.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"init\": () => (/* binding */ init)\n/* harmony export */ });\n/* harmony import */ var _css_main_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../css/main.css */ \"./css/main.css\");\n/* harmony import */ var _text_to_speech_pyramid_mp3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../text-to-speech/pyramid.mp3 */ \"./text-to-speech/pyramid.mp3\");\n/* harmony import */ var _depasquale_three_immersive_controls__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @depasquale/three-immersive-controls */ \"./node_modules/@depasquale/three-immersive-controls/build/three-immersive-controls.js\");\n/* harmony import */ var three_examples_jsm_libs_lil_gui_module_min_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three/examples/jsm/libs/lil-gui.module.min.js */ \"./node_modules/three/examples/jsm/libs/lil-gui.module.min.js\");\n/* harmony import */ var _libs_controllers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../libs/controllers.js */ \"./libs/controllers.js\");\n/* harmony import */ var _libs_SphereHandler_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../libs/SphereHandler.js */ \"./libs/SphereHandler.js\");\n/* harmony import */ var _libs_buttons__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../libs/buttons */ \"./libs/buttons.js\");\n/* harmony import */ var _libs_audio__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../libs/audio */ \"./libs/audio.js\");\n/* harmony import */ var _libs_lights__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../libs/lights */ \"./libs/lights.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./index */ \"./src/index.js\");\n/* provided dependency */ var THREE = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nlet S;\n\nvar params = {\n    dimension: 4,\n    radius: 0.15,\n    L: 500, //system size\n    d4: { cur: 0, min: -0.3, max: 0.3 },\n    lut: 'None',\n    quality: 7,\n    pyramid_size: 7,\n    particle_density: 2700,\n    particle_opacity: 0.8,\n    F_mag_max: 2e2,\n}\n\nparams.N = get_num_particles(params.pyramid_size);\n\nfunction init() {\n    _libs_SphereHandler_js__WEBPACK_IMPORTED_MODULE_5__.createNDParticleShader(params).then(() => {\n        main();\n    });\n}\n\nasync function main() {\n\n    await NDDEMCGPhysics();\n\n    _libs_lights__WEBPACK_IMPORTED_MODULE_8__.add_default_lights(_index__WEBPACK_IMPORTED_MODULE_9__.scene);\n\n    const base_geometry = new THREE.PlaneGeometry(10, 10);\n    const base_material = new THREE.MeshBasicMaterial({ color: 0x333333, side: THREE.DoubleSide });\n    const plane = new THREE.Mesh(base_geometry, base_material);\n    plane.rotateX(Math.PI / 2.);\n    _index__WEBPACK_IMPORTED_MODULE_9__.scene.add(plane);\n\n    _libs_SphereHandler_js__WEBPACK_IMPORTED_MODULE_5__.add_spheres(S, params, _index__WEBPACK_IMPORTED_MODULE_9__.scene);\n\n    if (params.dimension == 4) {\n        let gui = new three_examples_jsm_libs_lil_gui_module_min_js__WEBPACK_IMPORTED_MODULE_3__.GUI();\n        gui.width = 320;\n        gui.add(params.d4, 'cur', -1, 1, 0.001).name('D4 location').listen();\n        gui.remove_me = true;\n    }\n\n    _libs_buttons__WEBPACK_IMPORTED_MODULE_6__.add_scene_change_button(_index__WEBPACK_IMPORTED_MODULE_9__.apps.list[_index__WEBPACK_IMPORTED_MODULE_9__.apps.current - 1].url, _index__WEBPACK_IMPORTED_MODULE_9__.apps.list[_index__WEBPACK_IMPORTED_MODULE_9__.apps.current - 1].name, _index__WEBPACK_IMPORTED_MODULE_9__.controls, _index__WEBPACK_IMPORTED_MODULE_9__.scene, [-1, 1, 1], 0.25, [0, Math.PI / 4, 0]);\n    setTimeout(() => { _libs_buttons__WEBPACK_IMPORTED_MODULE_6__.add_scene_change_button(_index__WEBPACK_IMPORTED_MODULE_9__.apps.list[_index__WEBPACK_IMPORTED_MODULE_9__.apps.current + 1].url, _index__WEBPACK_IMPORTED_MODULE_9__.apps.list[_index__WEBPACK_IMPORTED_MODULE_9__.apps.current + 1].name, _index__WEBPACK_IMPORTED_MODULE_9__.controls, _index__WEBPACK_IMPORTED_MODULE_9__.scene, [1, 1, 1], 0.25, [0, -Math.PI / 4, 0]) }, _index__WEBPACK_IMPORTED_MODULE_9__.apps.list);\n\n    _index__WEBPACK_IMPORTED_MODULE_9__.renderer.setAnimationLoop(function () {\n        if (_index__WEBPACK_IMPORTED_MODULE_9__.controls !== undefined) {\n            _index__WEBPACK_IMPORTED_MODULE_9__.controls.update();\n            if (_index__WEBPACK_IMPORTED_MODULE_9__.controls.vrControls.controllerGrips.left !== undefined) {\n                let loc = new THREE.Vector3();\n                _index__WEBPACK_IMPORTED_MODULE_9__.controls.vrControls.controllerGrips.left.getWorldPosition(loc);\n                // console.log( controls.vrControls.controllerGrips.left.position )\n                S.simu_fixParticle(params.N - 1,\n                    [loc.x,\n                    loc.z,\n                    loc.y,\n                    params.d4.cur\n                    ]\n                );\n            }\n            if (_index__WEBPACK_IMPORTED_MODULE_9__.controls.vrControls.controllerGrips.right !== undefined) {\n                let loc = new THREE.Vector3();\n                _index__WEBPACK_IMPORTED_MODULE_9__.controls.vrControls.controllerGrips.right.getWorldPosition(loc);\n                // console.log( controls.vrControls.controllerGrips.left.position )\n                S.simu_fixParticle(params.N - 2,\n                    [loc.x,\n                    loc.z,\n                    loc.y,\n                    params.d4.cur\n                    ]\n                );\n            }\n        }\n        // console.log(SPHERES.spheres.children[params.N-1])\n        S.simu_step_forward(5);\n        _libs_SphereHandler_js__WEBPACK_IMPORTED_MODULE_5__.move_spheres(S, params);\n        _libs_SphereHandler_js__WEBPACK_IMPORTED_MODULE_5__.draw_force_network(S, params, _index__WEBPACK_IMPORTED_MODULE_9__.scene);\n        _index__WEBPACK_IMPORTED_MODULE_9__.renderer.render(_index__WEBPACK_IMPORTED_MODULE_9__.scene, _index__WEBPACK_IMPORTED_MODULE_9__.camera);\n        // console.log(controls.player.position)\n        _libs_controllers_js__WEBPACK_IMPORTED_MODULE_4__.moveInD4(params, _index__WEBPACK_IMPORTED_MODULE_9__.controls);\n    });\n\n    _libs_audio__WEBPACK_IMPORTED_MODULE_7__.play_track('pyramid.mp3', _index__WEBPACK_IMPORTED_MODULE_9__.camera, 3000);\n}\n\nfunction get_num_particles(L) {\n    let N = 0;\n    let i = 1;\n    for (var n = L; n > 0; n--) {\n        N += i * n;\n        i += 1;\n    }\n    return N + 2; // adding your hands\n    // return L * L * L + 1; // cube\n}\n\nfunction set_ball_positions() {\n    let n = 0;\n\n    // add the pyramid\n    for (var k = 0; k < params.pyramid_size; k++) {\n        let cur_pyramid_length = params.pyramid_size - k;\n        let z = k * 1.8 * params.radius;// + params.radius;\n        for (var i = 0; i < cur_pyramid_length; i++) {\n            for (var j = 0; j < cur_pyramid_length - i; j++) {\n                let x = i * 1.825 * params.radius - cur_pyramid_length * params.radius * 0.65;// + 2 * params.radius;\n                let y = j * 2.01 * params.radius - (cur_pyramid_length - i) * params.radius + params.radius;// - i%2*radius;\n                console.log(n, x, y, z);\n                S.simu_interpret_command(\"location \" + String(n) + \" \" + String(x) + \" \" + String(y) + \" \" + String(z) + \" \" + String(0.01));\n                if (k === 0) {\n                    S.simu_setFrozen(n);\n                }\n                n++;\n                // if (k > 0) { S.simu_interpret_command(\"location \" + String(n) + \" \" + String(x) + \" \" + String(params.table_height - params.L2 + params.radius) + \" \" + String(y) + \" \" + String(-w)); n++; }\n\n            }\n        }\n    }\n\n    // add a cube\n    // for (let i = 0; i < params.pyramid_size; i++) {\n    //     for (let j = 0; j < params.pyramid_size; j++) {\n    //         for (let k = 0; k < params.pyramid_size; k++) {\n    //             let x = params.radius * (i * 2 - params.pyramid_size / 2.);\n    //             let y = params.radius * (j * 2 - params.pyramid_size / 2.);\n    //             let z = params.radius * (k * 2 + 1);\n    //             console.log(n, x, y, z);\n    //             if (k === 0) {\n    //                 S.simu_setFrozen(n);\n    //             }\n    //             S.simu_interpret_command(\"location \" +\n    //                 String(n) + \" \" +\n    //                 String(x) + \" \" +\n    //                 String(y) + \" \" +\n    //                 String(z) + \" \" +\n    //                 // String(0));\n    //                 String(0.1 * params.radius * Math.random()));\n    //             n++\n    //         }\n    //     }\n    // }\n\n    // add the cue stick\n    // if (params.vr) {\n    S.simu_interpret_command(\"location \" + String(params.N - 1) + \" 10 10 10 0\");\n    S.simu_setFrozen(params.N - 1);\n    // console.log(params.N)\n    S.simu_interpret_command(\"location \" + String(params.N - 2) + \" 10 10 10 0\");\n    S.simu_setFrozen(params.N - 2);\n    // console.log(params.N)\n\n    // let pool_cue_particle_volume = Math.PI*Math.PI*Math.pow(POOLCUE.small_end_radius,4)/2.;\n    // let pool_cue_particle_mass = params.particle_volume * params.particle_density/1e3;\n    // S.setRadius(params.N, POOLCUE.small_end_radius);\n    // S.setMass(params.N, params.particle_mass/10.);\n    // }\n}\n\nasync function NDDEMCGPhysics() {\n\n    if ('DEMCGND' in window === false) {\n\n        console.error('NDDEMPhysics: Couldn\\'t find DEMCGND.js');\n        return;\n\n    }\n\n    await DEMCGND().then((NDDEMCGLib) => {\n        if (params.dimension == 3) {\n            S = new NDDEMCGLib.DEMCG3D(params.N);\n        }\n        else if (params.dimension == 4) {\n            S = new NDDEMCGLib.DEMCG4D(params.N);\n        }\n        else if (params.dimension == 5) {\n            S = new NDDEMCGLib.DEMCG5D(params.N);\n        }\n        finish_setup();\n    });\n\n    function finish_setup() {\n        S.simu_interpret_command(\"dimensions \" + String(params.dimension) + \" \" + String(params.N));\n        S.simu_interpret_command(\"radius -1 \" + params.radius);\n        S.simu_interpret_command(\"mass -1 1\");\n        S.simu_interpret_command(\"auto rho\");\n        S.simu_interpret_command(\"auto inertia\");\n\n        S.simu_interpret_command(\"boundary 0 WALL -5 5\");\n        S.simu_interpret_command(\"boundary 1 WALL -5 5\");\n        S.simu_interpret_command(\"boundary 2 WALL 0 5\");\n        S.simu_interpret_command(\"gravity 0 0 -10 0\");\n\n        if (params.dimension == 4) {\n            S.simu_interpret_command(\"boundary 3 WALL \" + String(params.d4.min) + \" \" + String(params.d4.max));\n        }\n\n        set_ball_positions();\n        // console.log(params.N)\n\n        let tc = 0.02;\n        let rest = 0.5; // super low restitution coeff to dampen out quickly\n        params.particle_volume = Math.PI * Math.PI * Math.pow(params.radius, 4) / 2.;\n        params.particle_mass = params.particle_volume * params.particle_density;\n\n        let vals = _libs_SphereHandler_js__WEBPACK_IMPORTED_MODULE_5__.setCollisionTimeAndRestitutionCoefficient(tc, rest, params.particle_mass)\n\n        // console.log(params.particle_mass);\n\n        S.simu_interpret_command(\"set Kn \" + String(vals.stiffness));\n        S.simu_interpret_command(\"set Kt \" + String(0.8 * vals.stiffness));\n        S.simu_interpret_command(\"set GammaN \" + String(vals.dissipation));\n        S.simu_interpret_command(\"set GammaT \" + String(vals.dissipation));\n        S.simu_interpret_command(\"set Mu 0.5\");\n        S.simu_interpret_command(\"set Mu_wall 1\");\n        S.simu_interpret_command(\"set damping 1e-3\");\n        S.simu_interpret_command(\"set T 150\");\n        S.simu_interpret_command(\"set dt \" + String(tc / 20));\n        S.simu_interpret_command(\"set tdump 1000000\"); // how often to calculate wall forces\n        S.simu_interpret_command(\"auto skin\");\n        S.simu_finalise_init();\n\n    }\n}\n\n\n//# sourceURL=webpack://granular-vr/./src/pyramid.js?");

/***/ }),

/***/ "./text-to-speech/pyramid.mp3":
/*!************************************!*\
  !*** ./text-to-speech/pyramid.mp3 ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"3215f84149c1cfd4de89.mp3\";\n\n//# sourceURL=webpack://granular-vr/./text-to-speech/pyramid.mp3?");

/***/ })

}]);